// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Can also use "mysql", "sqlite", or "sqlserver"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  type        String   // shirt, pants, unders, etc.
  gender      String?  // male, female, kid-male, kid-female
  price       Float
  salePrice   Float?
  material    String?
  inStock     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  images    ProductImage[]
  colors    ProductColor[]
  sizes     ProductSize[]
  reviews   Review[]
  cartItems CartItem[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  alt       String?
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductColor {
  id        Int     @id @default(autoincrement())
  name      String
  color     String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductSize {
  id        Int     @id @default(autoincrement())
  value     String  // S, M, L, XL, etc.
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reviews   Review[]
  carts     Cart[]
  addresses Address[]
}

enum Role {
  ADMIN
  CUSTOMER
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  
  // Relations
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  order     Order?
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  
  // Relations
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id            Int         @id @default(autoincrement())
  status        OrderStatus @default(PENDING)
  totalAmount   Float
  paymentMethod String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  cartId        Int         @unique
  cart          Cart        @relation(fields: [cartId], references: [id])
  addressId     Int
  address       Address     @relation(fields: [addressId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model Address {
  id          Int     @id @default(autoincrement())
  street      String
  city        String
  state       String?
  postalCode  String
  country     String
  isDefault   Boolean @default(false)
  
  // Relations
  userId      Int
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
}
